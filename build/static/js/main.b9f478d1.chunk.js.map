{"version":3,"sources":["axios.js","Request.js","Components/Banner.jsx","Components/Nav.jsx","Components/Row.jsx","Components/Homescreen.jsx","App.js","features/counter/counterAPI.js","features/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","string","n","useState","movie","setMovie","useEffect","a","get","request","data","results","Math","floor","random","length","fetchData","console","log","className","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","substr","Nav","show","handleShow","transitionNavBar","window","scrollY","addEventListener","removeEventListener","src","alt","Row","fetchUrl","isLargeRow","movies","setMovies","map","poster_path","Homescreen","App","fetchCount","amount","Promise","resolve","setTimeout","incrementAsync","createAsyncThunk","response","counterSlice","createSlice","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","store","configureStore","reducer","counter","counterReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0VAUeA,E,OAJEC,EAAMC,OAAO,CAC1BC,QAAS,iCCPPC,EAAU,mCAqBDC,EAnBE,CACbC,cAAc,8BAAD,OAAgCF,EAAhC,mBAEbG,sBAAsB,wBAAD,OAA0BH,EAA1B,sBAErBI,cAAc,4BAAD,OAA6BJ,EAA7B,mBAEbK,kBAAkB,2BAAD,OAA4BL,EAA5B,mBAEjBM,kBAAkB,2BAAD,OAA6BN,EAA7B,mBAEjBO,kBAAkB,2BAAD,OAA6BP,EAA7B,mBAEjBQ,mBAAmB,2BAAD,OAA6BR,EAA7B,sBAElBS,mBAAmB,2BAAD,OAA6BT,EAA7B,oB,OCmCPU,MAhDf,WAEQ,IAmBiBC,EAAQC,EAnBzB,EAAyBC,mBAAS,IAAlC,mBAAMC,EAAN,KAAaC,EAAb,KAuBJ,OArBIC,qBAAU,WAAM,4CACZ,4BAAAC,EAAA,sEAC0BpB,EAAMqB,IAAIjB,EAASE,uBAD7C,cACUgB,EADV,OAEIJ,EACII,EAAQC,KAAKC,QACTC,KAAKC,MAAMD,KAAKE,SAAWL,EAAQC,KAAKC,QAAQI,OAAS,KAJrE,kBAOWxB,GAPX,4CADY,uBAAC,WAAD,wBAUZyB,KACD,IACHC,QAAQC,IAAId,GAUZ,yBACIe,UAAU,SACVC,MAAO,CACHC,eAAiB,QACjBC,gBAAgB,4CAAD,cAA8ClB,QAA9C,IAA8CA,OAA9C,EAA8CA,EAAOmB,cAArD,MACfC,mBAAoB,iBAL5B,UAQI,sBAAKL,UAAU,kBAAf,UACI,oBAAIA,UAAU,eAAd,UAAmC,OAALf,QAAK,IAALA,OAAA,EAAAA,EAAOqB,SAAP,OAAgBrB,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAOsB,QAAvB,OAA+BtB,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAOuB,iBACpE,sBAAKR,UAAU,iBAAf,UACI,wBAAQA,UAAU,gBAAlB,kBACA,wBAAQA,UAAU,gBAAlB,wBAEJ,oBAAIA,UAAU,qBAAd,UAnBSlB,EAmBkC,OAACG,QAAD,IAACA,OAAD,EAACA,EAAOwB,SAnBlC1B,EAmB2C,KAlBnD,OAAND,QAAM,IAANA,OAAA,EAAAA,EAAQc,QAASb,EAAID,EAAO4B,OAAO,EAAG3B,EAAE,GAAK,QAAUD,QAqB9D,qBAAKkB,UAAU,0B,YCZZW,MAjCf,WACI,MAA2B3B,oBAAS,GAApC,mBAAO4B,EAAP,KAAaC,EAAb,KAEMC,EAAmB,WACjBC,OAAOC,QAAU,IACjBH,GAAW,GAEXA,GAAW,IAQnB,OALA1B,qBAAU,WAEN,OADA4B,OAAOE,iBAAiB,SAAUH,GAC5B,kBAAKC,OAAOG,oBAAoB,SAAUJ,MACjD,IAMC,aAFA,CAEA,OAAKd,UAAS,cAASY,GAAQ,aAA/B,SACI,sBAAKZ,UAAU,eAAf,UACI,qBACAA,UAAY,WACZmB,IAAI,kEAAkEC,IAAI,KAE1E,qBACApB,UAAW,aACXmB,IAAI,0FAA0FC,IAAI,W,MCWnGC,MApCf,YAAuD,IAAxCf,EAAuC,EAAvCA,MAAOgB,EAAgC,EAAhCA,SAAgC,IAAtBC,kBAAsB,SACpD,EAA4BvC,mBAAS,IAArC,mBAAOwC,EAAP,KAAeC,EAAf,KAaA,OATAtC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACwBpB,EAAMqB,IAAIiC,GADlC,cACQhC,EADR,OAEEmC,EAAUnC,EAAQC,KAAKC,SAFzB,kBAGSF,GAHT,4CADc,uBAAC,WAAD,wBAMdO,KACC,CAACyB,IAGF,sBAAKtB,UAAU,MAAf,UACE,6BAAKM,IACL,qBAAKN,UAAU,cAAf,SACGwB,EAAOE,KACN,SAACzC,GAAD,OACIsC,GAActC,EAAM0C,cAClBJ,GAActC,EAAMmB,gBACtB,qBACEJ,UAAS,qBAAgBuB,GAAc,mBACvCJ,IAAG,UArBA,wCAqBA,OACDI,EAAatC,EAAM0C,YAAc1C,EAAMmB,eAEzCgB,IAAKnC,EAAMsB,gBCMZqB,MA9Bf,WACE,OACE,sBAAK5B,UAAU,aAAf,UACE,cAAC,EAAD,IAEA,cAAC,EAAD,IAEA,cAAC,EAAD,CACEM,MAAM,oBACNgB,SAAUlD,EAASE,sBACnBiD,YAAU,IAEZ,cAAC,EAAD,CAAKjB,MAAM,eAAegB,SAAUlD,EAASC,gBAE7C,cAAC,EAAD,CAAKiC,MAAM,YAAYgB,SAAUlD,EAASG,gBAE1C,cAAC,EAAD,CAAK+B,MAAM,gBAAgBgB,SAAUlD,EAASI,oBAE9C,cAAC,EAAD,CAAK8B,MAAM,gBAAgBgB,SAAUlD,EAASK,oBAE9C,cAAC,EAAD,CAAK6B,MAAM,gBAAgBgB,SAAUlD,EAASM,oBAE9C,cAAC,EAAD,CAAK4B,MAAM,iBAAiBgB,SAAUlD,EAASO,qBAE/C,cAAC,EAAD,CAAK2B,MAAM,gBAAgBgB,SAAUlD,EAASQ,yBCnBrCiD,MARf,WACE,OACE,qBAAK7B,UAAU,MAAf,SACE,cAAC,EAAD,O,OCNC,SAAS8B,IAAwB,IAAbC,EAAY,uDAAH,EAClC,OAAO,IAAIC,SAAQ,SAACC,GAAD,OACjBC,YAAW,kBAAMD,EAAQ,CAAE1C,KAAMwC,MAAW,QCAhD,IAUaI,EAAiBC,YAC5B,qBAD4C,uCAE5C,WAAOL,GAAP,eAAA3C,EAAA,sEACyB0C,EAAWC,GADpC,cACQM,EADR,yBAGSA,EAAS9C,MAHlB,2CAF4C,uDASjC+C,EAAeC,YAAY,CACtChC,KAAM,UACNiC,aArBmB,CACnBC,MAAO,EACPC,OAAQ,QAqBRC,SAAU,CACRC,UAAW,SAACC,GAKVA,EAAMJ,OAAS,GAEjBK,UAAW,SAACD,GACVA,EAAMJ,OAAS,GAGjBM,kBAAmB,SAACF,EAAOG,GACzBH,EAAMJ,OAASO,EAAOC,UAK1BC,cAAe,SAACC,GACdA,EACGC,QAAQjB,EAAekB,SAAS,SAACR,GAChCA,EAAMH,OAAS,aAEhBU,QAAQjB,EAAemB,WAAW,SAACT,EAAOG,GACzCH,EAAMH,OAAS,OACfG,EAAMJ,OAASO,EAAOC,cAKvB,EAAoDX,EAAaiB,QAgBzDjB,GAhBR,EAAQM,UAAR,EAAmBE,UAAnB,EAA8BC,kBAgBtBT,EAAf,SCrEakB,EAAQC,YAAe,CAClCC,QAAS,CACPC,QAASC,K,QCOOC,QACW,cAA7B9C,OAAO+C,SAASC,UAEe,UAA7BhD,OAAO+C,SAASC,UAEhBhD,OAAO+C,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUX,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJY,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.b9f478d1.chunk.js","sourcesContent":["//      >>>>>>>>>>>>> Axios is a promise based library used for making http requests <<<<<<<<<<<<\n\n// similar like ajax\n\nimport axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\"\n});\n\nexport default instance;\n","const API_KEY = \"6518ae7cd3d526b4453531051cc4d408\";\n\nconst requests = {\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`, \n    \n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n\n    fetchTopRated:`/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n\n    fetchActionMovies:`/discover/movie?api_key=${API_KEY}&with_genres=28`,\n\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`, \n    \n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`, \n    \n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`\n\n};\n\nexport default requests;","import React, { useEffect , useState } from 'react'\nimport './Banner.styles.css'\nimport axios from './../axios';\nimport requests from \"./../Request\";\nfunction Banner() {\n\n        const[movie, setMovie] = useState([]);\n\n        useEffect(() => {\n            async function fetchData(){\n                const request = await axios.get(requests.fetchNetflixOriginals);\n                setMovie(\n                    request.data.results[\n                        Math.floor(Math.random() * request.data.results.length - 1)\n                    ]\n                );\n                return requests;\n            }\n            fetchData();\n        }, []);\n        console.log(movie);\n\n            // =====> function for see more in description <<=====\n    // n is number of characters in description. string? is because there will be no description in the api for some movies and if there is lesser characters it will the string from : string\n    \n        function seeMore(string, n){\n            return string?.length > n ? string.substr(0, n-1) + ' ....' : string;\n        }\n\n    return (\n        <header\n            className='banner'\n            style={{\n                backgroundSize : 'cover',\n                backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n                backgroundPosition: 'center center',\n            }}\n        >\n            <div className=\"banner_contents\">\n                <h1 className=\"banner_title\">{movie?.title || movie?.name || movie?.original_name}</h1>\n                <div className=\"banner_buttons\">\n                    <button className='banner_button'>Play</button>\n                    <button className='banner_button'>My List</button>                   \n                </div>\n                <h1 className=\"banner_description\">{seeMore(movie?.overview,130)} \n                </h1>\n            </div>\n            <div className=\"banner_fadeBottom\"/>\n        </header>\n    )\n}\n\nexport default Banner\n","import React, { useState, useEffect } from 'react'\nimport './Nav.styles.css';\nfunction Nav() {\n    const [show, handleShow] = useState(false);\n\n    const transitionNavBar = () => {\n        if (window.scrollY > 100){\n            handleShow(true);\n        } else{\n            handleShow(false)\n        }\n    }\n    useEffect(() => {\n        window.addEventListener('scroll', transitionNavBar);\n        return()=> window.removeEventListener('scroll', transitionNavBar);\n    }, []);\n\n    return (\n\n        // ========if show is true execute nav_black=======\n\n        <div className={`nav ${show && 'nav_black'}`}> \n            <div className=\"nav_contents\">\n                <img \n                className = 'nav_logo'\n                src=\"https://assets.stickpng.com/images/580b57fcd9996e24bc43c529.png\" alt=\"\"/>\n\n                <img \n                className ='nav_avatar'\n                src=\"https://mir-s3-cdn-cf.behance.net/project_modules/disp/1bdc9a33850498.56ba69ac2ba5b.png\" alt=\"\"/>\n            </div>\n        </div>\n    )\n}\n\nexport default Nav\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"./../axios\";\nimport \"./Row.css\";\n\nfunction Row({ title, fetchUrl, isLargeRow = false }) {\n  const [movies, setMovies] = useState([]);\n\n  const base_url = \"https://image.tmdb.org/t/p/original/\";\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row_posters\">\n        {movies.map(\n          (movie) =>\n            ((isLargeRow && movie.poster_path) ||\n              (!isLargeRow && movie.backdrop_path)) && (\n              <img\n                className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n                src={`${base_url}${\n                  isLargeRow ? movie.poster_path : movie.backdrop_path\n                }`}\n                alt={movie.name}\n              />\n            )\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Row;\n","import React from \"react\";\nimport Banner from \"./Banner\";\nimport \"./Homescreen.styles.css\";\nimport Nav from \"./Nav\";\nimport requests from \"./../Request\";\nimport Row from \"./Row\";\n\nfunction Homescreen() {\n  return (\n    <div className=\"homeScreen\">\n      <Nav />\n\n      <Banner />\n\n      <Row\n        title=\"NETFLIX ORIGINALS\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n      \n    </div>\n  );\n}\n\nexport default Homescreen;\n","import React from 'react';\nimport './App.css';\nimport Homescreen from './Components/Homescreen';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Homescreen />\n    </div>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counter/counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}